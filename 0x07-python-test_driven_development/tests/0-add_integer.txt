============================
``0-add_integer`` module
============================

Using ``add_integer``
-------------------

``add_integer()`` will take two arguments that must be integers and then add
them together with the ``+`` operator.

::

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Now Use it
    >>> add_integer(3, 4)
    7

    >>> add_integer(0, 0)
    0

    >>> add_integer(0, -5)
    -5

    >>> add_integer(10.1, 10)
    20

    >>> add_integer(10.1, 10.9)
    20

    >>> add_integer(10.1, -10.9)
    0

    >>> add_integer(0)
    98

    >>> add_integer(0.0, None)
    Traceback (most recent call last):
	    ...
    TypeError: b must be an integer

    >>> add_integer(10, "string")
    Traceback (most recent call last):
	    ...
    TypeError: b must be an integer

    >>> add_integer("string", 10)
    Traceback (most recent call last):
	    ...
    TypeError: a must be an integer

    >>> add_integer("string", "another string")
    Traceback (most recent call last):
    	    ...
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

    >>> add_integer('10', 10)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer((10, 10))
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

    >>> add_integer("string")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

    >>> add_integer(-1)
    97

    >>> add_integer(5, float("nan"))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
    
    >>> add_integer(1, float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer